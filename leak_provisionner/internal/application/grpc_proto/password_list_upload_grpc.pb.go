// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/application/grpc_proto/password_list_upload.proto

package grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RawPasswordListUpload_UploadRawPasswordList_FullMethodName = "/proto.RawPasswordListUpload/UploadRawPasswordList"
)

// RawPasswordListUploadClient is the client API for RawPasswordListUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawPasswordListUploadClient interface {
	UploadRawPasswordList(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RawPasswordList, Status], error)
}

type rawPasswordListUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewRawPasswordListUploadClient(cc grpc.ClientConnInterface) RawPasswordListUploadClient {
	return &rawPasswordListUploadClient{cc}
}

func (c *rawPasswordListUploadClient) UploadRawPasswordList(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RawPasswordList, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RawPasswordListUpload_ServiceDesc.Streams[0], RawPasswordListUpload_UploadRawPasswordList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RawPasswordList, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RawPasswordListUpload_UploadRawPasswordListClient = grpc.ClientStreamingClient[RawPasswordList, Status]

// RawPasswordListUploadServer is the server API for RawPasswordListUpload service.
// All implementations must embed UnimplementedRawPasswordListUploadServer
// for forward compatibility.
type RawPasswordListUploadServer interface {
	UploadRawPasswordList(grpc.ClientStreamingServer[RawPasswordList, Status]) error
	mustEmbedUnimplementedRawPasswordListUploadServer()
}

// UnimplementedRawPasswordListUploadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRawPasswordListUploadServer struct{}

func (UnimplementedRawPasswordListUploadServer) UploadRawPasswordList(grpc.ClientStreamingServer[RawPasswordList, Status]) error {
	return status.Errorf(codes.Unimplemented, "method UploadRawPasswordList not implemented")
}
func (UnimplementedRawPasswordListUploadServer) mustEmbedUnimplementedRawPasswordListUploadServer() {}
func (UnimplementedRawPasswordListUploadServer) testEmbeddedByValue()                               {}

// UnsafeRawPasswordListUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawPasswordListUploadServer will
// result in compilation errors.
type UnsafeRawPasswordListUploadServer interface {
	mustEmbedUnimplementedRawPasswordListUploadServer()
}

func RegisterRawPasswordListUploadServer(s grpc.ServiceRegistrar, srv RawPasswordListUploadServer) {
	// If the following call pancis, it indicates UnimplementedRawPasswordListUploadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RawPasswordListUpload_ServiceDesc, srv)
}

func _RawPasswordListUpload_UploadRawPasswordList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RawPasswordListUploadServer).UploadRawPasswordList(&grpc.GenericServerStream[RawPasswordList, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RawPasswordListUpload_UploadRawPasswordListServer = grpc.ClientStreamingServer[RawPasswordList, Status]

// RawPasswordListUpload_ServiceDesc is the grpc.ServiceDesc for RawPasswordListUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawPasswordListUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RawPasswordListUpload",
	HandlerType: (*RawPasswordListUploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadRawPasswordList",
			Handler:       _RawPasswordListUpload_UploadRawPasswordList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/application/grpc_proto/password_list_upload.proto",
}
